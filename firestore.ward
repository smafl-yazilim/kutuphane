type User = {
  name: string,
  surname: string,
  studentNumber: string,
  role: int,
}

type Book = {
  name: string,
  author: string,
  publisher: string,
  isbn?: string,
  publicationDate?: string,
  publicationPlace?: string,
  edition?: int,
  classification: string,
  category: string,
  copies: {
    total: int,
    borrowed: int,
    borrowedBy: string[],
    borrowedAt: map,
  },
}

type Settings = {
  borrowingLimits: {
    amount: int,
    days: int,
  },
}

function getAuthenticatedUser() {
  return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
}

function isModerator() {
  let user = getAuthenticatedUser();
  return user.role > 0;
}

function isAdmin() {
  let user = getAuthenticatedUser();
  return user.role > 1;
}

match /{document=**} {
  allow read, write: if false;
}

match /users/{userId} is User {
  allow read: if request.auth.uid == userId || isModerator();

  allow create, update, delete:
    if isModerator()
      && getAuthenticatedUser().role > resource.data.role
      && getAuthenticatedUser().role > request.resource.data.role
      && request.resource.data.studentNumber.matches('^\\d+$');
}

match /books/{bookId} is Book {
  allow read: if true;
  allow create, update: if isModerator();
  allow delete: if isModerator();
}

match /settings/{document=**} is Settings {
  allow create, delete: if false;
  allow read: true;
  allow update: if isAdmin();
}
